

#define SYNTH_ADDR (XPAR_SYNTH_BASEADDR)



#define SYNTH_BANK_OFF(bk) (0x1000*(bk))
#define MAX_BANKS 4

#define SYNTH_WAVETYPE_OFF (4*0)
#define SYNTH_WAVETYPE_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_WAVETYPE_OFF)

#define SYNTH_PULSEWIDTH_OFF (4*1)
#define SYNTH_PULSEWIDTH_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_PULSEWIDTH_OFF)

#define SYNTH_ATTACK_OFF (4*2)
#define SYNTH_ATTACK_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_ATTACK_OFF)

#define SYNTH_DECAY_OFF (4*3)
#define SYNTH_DECAY_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_DECAY_OFF)

#define SYNTH_SUSTAIN_OFF (4*4)
#define SYNTH_SUSTAIN_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_SUSTAIN_OFF)

#define SYNTH_RELEASE_OFF (4*5)
#define SYNTH_RELEASE_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_RELEASE_OFF)

#define SYNTH_LFORUN_OFF (4*6)
#define SYNTH_LFORUN_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_LFORUN_OFF)

#define SYNTH_LFOINCR_OFF (4*7)
#define SYNTH_LFOINCR_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_LFOINCR_OFF)

#define SYNTH_LFOAMP_OFF (4*8)
#define SYNTH_LFOAMP_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_LFOAMP_OFF)

#define SYNTH_LFOWAVETYPE_OFF (4*9)
#define SYNTH_LFOWAVETYPE_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_LFOWAVETYPE_OFF)

#define SYNTH_LFOSELECTION_OFF (4*10)
#define SYNTH_LFOSELECTION_REG(bk) REG32(SYNTH_ADDR+SYNTH_BANK_OFF(bk)+SYNTH_LFOSELECTION_OFF)
typedef struct 
{
    u32 Increment:1;
    u32 PulseWidth:1;
    u32 Unused:30;
} LfoSelection;
#define SYNTH_LFOSELECTION_STRUCT(bk) (*(LfoSelection *)(&SYNTH_LFOSELECTION_REG(bk)))



#define SYNTH_CHANNEL_OFF(ch) (0x100*(ch)+0x100)
#define SYNTH_BANK_CHANNEL_OFF(bk,ch) (SYNTH_BANK_OFF(bk)+SYNTH_CHANNEL_OFF(ch))
#define MAX_CHANNELS 8

#define SYNTH_GATE_OFF (4*0)
#define SYNTH_GATE_REG(bk,ch) REG32(SYNTH_ADDR+SYNTH_BANK_CHANNEL_OFF(bk,ch)+SYNTH_GATE_OFF)

#define SYNTH_INCR_OFF (4*1)
#define SYNTH_INCR_REG(bk,ch) REG32(SYNTH_ADDR+SYNTH_BANK_CHANNEL_OFF(bk,ch)+SYNTH_INCR_OFF)

#define SYNTH_RUNNING_OFF (4*2)
#define SYNTH_RUNNING_REG(bk,ch) REG32(SYNTH_ADDR+SYNTH_BANK_CHANNEL_OFF(bk,ch)+SYNTH_RUNNING_OFF)

#define SYNTH_ENVELOPE_OFF (4*3)
#define SYNTH_ENVELOPE_REG(bk,ch) REG32(SYNTH_ADDR+SYNTH_BANK_CHANNEL_OFF(bk,ch)+SYNTH_ENVELOPE_OFF)

#define SYNTH_ADSR_STATE_OFF (4*4)
#define SYNTH_ADSR_STATE_REG(bk,ch) REG32(SYNTH_ADDR+SYNTH_BANK_CHANNEL_OFF(bk,ch)+SYNTH_ADSR_STATE_OFF)



#define KEYBOARD_DRIVE_OFF 0x00
#define KEYBOARD_DRIVE_ADDR (XPAR_APBSLAVE_BREAKOUT_KEYBOARD_BASEADDR + KEYBOARD_DRIVE_OFF)
#define KEYBOARD_DRIVE_REG REG32(KEYBOARD_DRIVE_ADDR)

#define KEYBOARD_SENSE_OFF 0x04
#define KEYBOARD_SENSE_ADDR (XPAR_APBSLAVE_BREAKOUT_KEYBOARD_BASEADDR + KEYBOARD_SENSE_OFF)
#define KEYBOARD_SENSE_REG REG32(KEYBOARD_SENSE_ADDR)


/*
0: Unpressed
1: KeyDown
2: KeyPressed
3: KeyUp
*/
extern u8 KeyState[61];
extern u8 KeyBankChannel[sizeof(KeyState)][2];
extern u8 KeyOctaveOffset;

extern u32 NoteIncrs[96];



#define TOUCHSTRIP_POSITION_OFF (4*0)
#define TOUCHSTRIP_POSITION_ADDR (XPAR_IOCONTROLLER_1_BASEADDR + TOUCHSTRIP_POSITION_OFF)
#define TOUCHSTRIP_POSITION_REG REG32(TOUCHSTRIP_POSITION_ADDR)

#define TOUCHSTRIP_PRESSURE_OFF (4*1)
#define TOUCHSTRIP_PRESSURE_ADDR (XPAR_IOCONTROLLER_1_BASEADDR + TOUCHSTRIP_PRESSURE_OFF)
#define TOUCHSTRIP_PRESSURE_REG REG32(TOUCHSTRIP_PRESSURE_ADDR)

#define ANALOG_CTL_OFF (4*2)
#define ANALOG_CTL_ADDR (XPAR_IOCONTROLLER_1_BASEADDR + ANALOG_CTL_OFF)
#define ANALOG_CTL_REG REG32(ANALOG_CTL_ADDR)

#define ANALOG_CTL_WRITE(addr, data) (ANALOG_CTL_REG = ((addr)<<8) | (data))
#define ANALOG_CTL_SYNC() while (ANALOG_CTL_REG==1) {}

#define ANALOG_CTL_RESET_OFF (4*3)
#define ANALOG_CTL_RESET_ADDR (XPAR_IOCONTROLLER_1_BASEADDR + ANALOG_CTL_RESET_OFF)
#define ANALOG_CTL_RESET_REG REG32(ANALOG_CTL_RESET_ADDR)

